/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Diff-Match-Patch.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Diff Match Patch
 #	author : miyako
 #	2020/09/03
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Diff-Match-Patch.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Diff Match Patch
            
			case 1 :
				diff_match_patch(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void diff_match_patch(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1_text_1;
    C_TEXT Param2_text_2;
    C_TEXT returnValue;

    Param1_text_1.fromParamAtIndex(pParams, 1);
    Param2_text_2.fromParamAtIndex(pParams, 2);

#if VERSIONWIN
    /* because we used the same name for function */
    class diff_match_patch dmp;
#else
    DiffMatchPatch *dmp = [[DiffMatchPatch alloc]init];
#endif
    
    PA_ObjectRef option = PA_GetObjectParameter(params, 3);
    
    if(option) {
        
        /* diff options */
        
        if(ob_is_defined(option, L"diffTimeout")) {
            dmp.Diff_Timeout = (float)ob_get_n(option, L"diffTimeout");
        }
        
        if(ob_is_defined(option, L"diffEditCost")) {
            dmp.Diff_EditCost = (short)ob_get_n(option, L"diffEditCost");
        }
        
        if(ob_is_defined(option, L"patchMargin")) {
            dmp.Patch_Margin = (short)ob_get_n(option, L"patchMargin");
        }
        
        if(ob_is_defined(option, L"patchDeleteThreshold")) {
            dmp.Patch_DeleteThreshold = (float)ob_get_n(option, L"patchDeleteThreshold");
        }
        
        /* match options */
        
        if(ob_is_defined(option, L"matchThreshold")) {
            dmp.Match_Threshold = (float)ob_get_n(option, L"matchThreshold");
        }
        
        if(ob_is_defined(option, L"matchDistance")) {
            dmp.Match_Distance = (int)ob_get_n(option, L"matchDistance");
        }
        
        if(ob_is_defined(option, L"matchMaxBits")) {
#if VERSIONWIN
            dmp.Match_MaxBits = (short)ob_get_n(option, L"matchMaxBits");
#else
            //protected on mac
#endif
        }
        
    }
            
    /*
    NSLog(@"Diff_Timeout:%f", dmp.Diff_Timeout);
    NSLog(@"Diff_EditCost:%i", dmp.Diff_EditCost);
    NSLog(@"Patch_Margin:%i", dmp.Patch_Margin);
    NSLog(@"Patch_DeleteThreshold:%f", dmp.Patch_DeleteThreshold);
    NSLog(@"Match_Threshold:%f", dmp.Match_Threshold);
    NSLog(@"Match_Distance:%i", dmp.Match_Distance);
    NSLog(@"Match_MaxBits:%i", dmp.Match_MaxBits);
     */
    
#if VERSIONWIN
    QString t1((const QChar *)Param1_text_1.getUTF16StringPtr(), Param1_text_1.getUTF16Length());
    QString t2((const QChar *)Param2_text_2.getUTF16StringPtr(), Param2_text_2.getUTF16Length());
    QList<Diff>diffs = dmp.diff_main(t1, t2);
    QString html = dmp.diff_prettyHtml(diffs);
    returnValue.setUTF16String((const PA_Unichar *)html.data(), html.length());
#else
    NSString *t1 = Param1_text_1.copyUTF16String();
    NSString *t2 = Param2_text_2.copyUTF16String();
    NSMutableArray *diffs = [dmp diff_mainOfOldString:t1 andNewString:t2];
    NSString *html = [dmp diff_prettyHtml:diffs];
    returnValue.setUTF16String(html);
    [t2 release];
    [t1 release];
    [dmp release];
#endif

    returnValue.setReturn(pResult);
}
